# -*- coding: utf-8 -*-
"""Data Science Project  GUVI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11i--c7yYsrPw1D1YeZDDR8oBa4u_g_Mm
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np
import io
import matplotlib.pyplot as plt
import seaborn as sns

# Set a style for plots for better aesthetics
sns.set_style("whitegrid")

# --- Part 1: Student Marks and Grades Summary ---

print("--- Part 1: Student Marks and Grades Summary ---")

# Load the dataset
df = None
try:
    df = pd.read_csv('/Student_Marks.csv')

except FileNotFoundError:
    print("Error: Student_Marks.csv not found. Please ensure the file is uploaded or in the correct directory.")
    print("If running in Google Colab, please upload the 'Student_Marks.csv' file.")
except Exception as e:
    print(f"An error occurred while loading the CSV: {e}")

# Only proceed if the dataframe was loaded successfully
if df is not None:

    df['Student_ID'] = [f'Student_{i+1}' for i in range(len(df))]

    # Display initial data
    print("\nOriginal Data (first 5 rows):")
    print(df.head())

    # --- Data Cleaning & Preprocessing ---

    print("\n--- Data Cleaning & Preprocessing ---")

    # Check for missing values
    print("\nMissing values before cleaning:")
    print(df.isnull().sum())


    # Check data types
    print("\nData types before cleaning:")
    print(df.info())

    # --- Calculation of Total and Average for each student ---

    df['Total_Marks'] = df['Marks']
    df['Average_Marks'] = df['Marks']

    print("\nStudent-wise Total and Average Marks:")
    print(df[['Student_ID', 'Total_Marks', 'Average_Marks']].head())

    # --- Grade Assignment ---
    def assign_grade(marks):
        """Assigns a grade based on the given marks."""
        if 90 <= marks <= 100:
            return 'A'
        elif 80 <= marks < 90:
            return 'B'
        elif 70 <= marks < 80:
            return 'C'
        elif 60 <= marks < 70:
            return 'D'
        else:
            return 'F'

    df['Grade'] = df['Average_Marks'].apply(assign_grade)

    print("\nStudent-wise Grades (first 5 rows):")
    print(df[['Student_ID', 'Average_Marks', 'Grade']].head())

    # --- Class Average and Topper ---
    class_average = df['Marks'].mean()
    class_topper = df.loc[df['Marks'].idxmax()]

    print(f"\nClass Average Marks: {class_average:.2f}")
    print(f"Class Topper: {class_topper['Student_ID']} with Marks: {class_topper['Marks']:.2f}")

    # Display full summary
    print("\n--- Full Student Summary ---")
    print(df[['Student_ID', 'number_courses', 'time_study', 'Marks', 'Total_Marks', 'Average_Marks', 'Grade']].to_string(index=False))


    # --- Part 2: Machine Learning Models for Mark Prediction ---

    print("\n\n--- Part 2: Machine Learning Models for Mark Prediction ---")
    print("Using 'number_courses' and 'time_study' to predict 'Marks'.")

    # Define features (X) and target (y)
    X = df[['number_courses', 'time_study']]
    y = df['Marks']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    print(f"\nTraining data shape: {X_train.shape}")
    print(f"Testing data shape: {X_test.shape}")

    # Initialize and train models
    models = {
        "Linear Regression": LinearRegression(),
        "Decision Tree Regressor": DecisionTreeRegressor(random_state=42),
        "Random Forest Regressor": RandomForestRegressor(random_state=42)
    }

    results = {}

    for name, model in models.items():
        print(f"\nTraining {name}...")
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        # Evaluate model
        mae = mean_absolute_error(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        rmse = np.sqrt(mse)
        r2 = r2_score(y_test, y_pred)

        results[name] = {
            "MAE": mae,
            "MSE": mse,
            "RMSE": rmse,
            "R2": r2
        }
        print(f"{name} Evaluation:")
        print(f"  Mean Absolute Error (MAE): {mae:.2f}")
        print(f"  Mean Squared Error (MSE): {mse:.2f}")
        print(f"  Root Mean Squared Error (RMSE): {rmse:.2f}")
        print(f"  R-squared (R2): {r2:.2f}")

    print("\n--- Model Performance Summary ---")
    for name, metrics in results.items():
        print(f"\n{name}:")
        for metric_name, value in metrics.items():
            print(f"  {metric_name}: {value:.2f}")

    # --- Demonstrate Prediction with a trained model (e.g., Random Forest) ---
    print("\n--- Example Prediction using Random Forest Regressor ---")
    example_model = models["Random Forest Regressor"]

    # Create new data points for prediction
    new_student_data = pd.DataFrame({
        'number_courses': [5, 7, 3],
        'time_study': [4.0, 6.5, 2.0]
    })

    predicted_marks = example_model.predict(new_student_data)

    print("\nNew Student Data for Prediction:")
    print(new_student_data)
    print("\nPredicted Marks for New Students:")
    for i, marks in enumerate(predicted_marks):
        print(f"  Student {i+1}: {marks:.2f}")


    # --- Part 3: Data Visualization ---

    print("\n\n--- Part 3: Data Visualization ---")

    # Plot 1: Scatter plot of Time Study vs. Marks
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='time_study', y='Marks', hue='Grade', data=df, palette='viridis', s=100, alpha=0.8)
    plt.title('Student Marks vs. Time Study (Colored by Grade)')
    plt.xlabel('Time Study (hours)')
    plt.ylabel('Marks')
    plt.grid(True)
    plt.show()

    # Plot 2: Histogram of Marks Distribution
    plt.figure(figsize=(10, 6))
    sns.histplot(df['Marks'], bins=10, kde=True, color='skyblue')
    plt.title('Distribution of Student Marks')
    plt.xlabel('Marks')
    plt.ylabel('Number of Students')
    plt.show()

    # Plot 3: Bar chart of Grade Distribution
    plt.figure(figsize=(8, 5))
    grade_counts = df['Grade'].value_counts().sort_index()
    sns.barplot(x=grade_counts.index, y=grade_counts.values, palette='coolwarm')
    plt.title('Distribution of Grades')
    plt.xlabel('Grade')
    plt.ylabel('Number of Students')
    plt.show()

    # Plot 4: Box plot of Marks by Number of Courses
    plt.figure(figsize=(10, 6))
    sns.boxplot(x='number_courses', y='Marks', data=df, palette='pastel')
    plt.title('Marks Distribution by Number of Courses')
    plt.xlabel('Number of Courses')
    plt.ylabel('Marks')
    plt.show()

    print("\nVisualizations generated and displayed above.")
else:
    print("\nDataframe 'df' was not created due to the file loading error. Please fix the error and re-run the cell.")